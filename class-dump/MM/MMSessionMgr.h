//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "MMService.h"

#import "IChatSyncMgrExt-Protocol.h"
#import "IContactMgrExt-Protocol.h"
#import "IGroupMgrExt-Protocol.h"
#import "IMessageExt-Protocol.h"
#import "MMService-Protocol.h"
#import "SyncExt-Protocol.h"

@class MMSessionSortLogic, MMSessionStorage, MMTimer, NSArray, NSMutableArray, NSObject, NSRecursiveLock, NSString;
@protocol OS_dispatch_queue;

@interface MMSessionMgr : MMService <IGroupMgrExt, SyncExt, IMessageExt, IContactMgrExt, IChatSyncMgrExt, MMService>
{
    BOOL _m_hasClearData;
    BOOL _bDoingSync;
    unsigned int _m_totalUnReadCount;
    unsigned int _m_maxMsgCreateTime;
    NSString *_m_currentSessionName;
    NSMutableArray *_m_arrSession;
    MMSessionStorage *_m_storage;
    MMSessionSortLogic *_m_sortLogic;
    NSRecursiveLock *_m_arrSessionLock;
    NSRecursiveLock *_m_reorderSessionLock;
    MMTimer *_updateTimer;
    NSObject<OS_dispatch_queue> *_updateQueue;
}

- (void).cxx_destruct;
@property BOOL bDoingSync; // @synthesize bDoingSync=_bDoingSync;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *updateQueue; // @synthesize updateQueue=_updateQueue;
@property(retain, nonatomic) MMTimer *updateTimer; // @synthesize updateTimer=_updateTimer;
@property(retain, nonatomic) NSRecursiveLock *m_reorderSessionLock; // @synthesize m_reorderSessionLock=_m_reorderSessionLock;
@property(retain, nonatomic) NSRecursiveLock *m_arrSessionLock; // @synthesize m_arrSessionLock=_m_arrSessionLock;
@property BOOL m_hasClearData; // @synthesize m_hasClearData=_m_hasClearData;
@property(retain, nonatomic) MMSessionSortLogic *m_sortLogic; // @synthesize m_sortLogic=_m_sortLogic;
@property(retain, nonatomic) MMSessionStorage *m_storage; // @synthesize m_storage=_m_storage;
@property(retain, nonatomic) NSMutableArray *m_arrSession; // @synthesize m_arrSession=_m_arrSession;
@property unsigned int m_maxMsgCreateTime; // @synthesize m_maxMsgCreateTime=_m_maxMsgCreateTime;
@property unsigned int m_totalUnReadCount; // @synthesize m_totalUnReadCount=_m_totalUnReadCount;
@property(retain) NSString *m_currentSessionName; // @synthesize m_currentSessionName=_m_currentSessionName;
- (void)onInitFinish;
- (void)chatDelete;
- (void)chatMuteOrUnmute;
- (void)chatStickyOrUnsticky;
- (void)onDeleteContacts:(id)arg1;
- (unsigned int)GenSendMsgTime;
- (void)processSessionWithUserName:(id)arg1 isMuted:(BOOL)arg2 syncToServer:(BOOL)arg3;
- (void)unmuteSessionByUserName:(id)arg1 syncToServer:(BOOL)arg2;
- (void)unmuteSessionByUserName:(id)arg1;
- (void)muteSessionByUserName:(id)arg1 syncToServer:(BOOL)arg2;
- (void)muteSessionByUserName:(id)arg1;
- (void)processSessionWithUserName:(id)arg1 isTop:(BOOL)arg2 syncToServer:(BOOL)arg3;
- (void)topDraftSessionBySessionInfo:(id)arg1;
- (BOOL)isTopSessionCountExceed;
- (void)untopSessionByUserName:(id)arg1 syncToServer:(BOOL)arg2;
- (void)untopSessionByUserName:(id)arg1;
- (void)topSessionByUserName:(id)arg1 syncToServer:(BOOL)arg2;
- (void)topSessionByUserName:(id)arg1;
- (void)handleChatList:(id)arg1 source:(int)arg2;
- (void)createNewSessionWithUserName:(id)arg1;
- (unsigned int)getTotalUnreadCount;
- (void)markSessionAsReadWithUserName:(id)arg1;
- (void)addOrModifySessionArray:(id)arg1;
- (void)processAddOrModifySessionArray:(id)arg1;
- (void)addOrModifySession:(id)arg1;
- (void)processAddOrModifySession:(id)arg1;
- (id)getTopNSession:(unsigned long long)arg1;
- (id)getAllGroupSession;
- (id)getAllGroupSessionContact;
- (id)getNextUnreadSessionWithCurIndex:(unsigned long long)arg1;
- (id)getFirstUnreadSession;
- (long long)getFirstUntopSessionIndex;
- (BOOL)ignoreMutedChatsWhileAutoScroll;
- (id)getSessionByUserName:(id)arg1;
- (id)getSessionAtIndex:(unsigned long long)arg1;
- (long long)getSessionIndexByUserName:(id)arg1;
- (unsigned long long)getSessionCount;
- (id)getAllSessions;
- (void)dealloc;
- (void)onServiceClearData;
- (void)onServiceInit;
- (id)init;
- (void)onModifyContacts:(id)arg1;
- (void)onUnReadCountChange:(id)arg1;
- (void)onUnreadSession:(id)arg1;
- (void)onEnterSession:(id)arg1;
- (void)onMsgDeletedForSession:(id)arg1;
- (void)onModMsg:(id)arg1 msgData:(id)arg2;
- (void)onChatSyncMsgs:(id)arg1 msgList:(id)arg2;
- (void)onAddMsgListForSession:(id)arg1;
- (void)processOnModifyContact:(id)arg1;
- (void)processOnSyncSessionList:(id)arg1 source:(int)arg2;
- (void)processOnEnterSession:(id)arg1 isFromLocal:(BOOL)arg2;
- (void)processOnMsgDeleted:(id)arg1;
- (BOOL)isVoiceMessagePlayed:(id)arg1;
- (void)processOnChatSyncMsgs:(id)arg1 msgList:(id)arg2;
- (void)processOnModMsg:(id)arg1 msgData:(id)arg2;
- (BOOL)isNeedCallNewMsgArrival:(id)arg1;
- (id)onChatSyncNeedAddSession:(id)arg1;
- (void)onModMsgNeedAddSession:(id)arg1;
- (void)processOnAddMsgListForSession:(id)arg1;
- (void)checkUpdate;
- (void)stopUpdateTimer;
- (void)updateGroupChatSessionIfNeeded;
- (void)doRecoverSessionList;
- (void)recoverSessionListFromLocalMsg;
- (id)genSessionInfo:(id)arg1 withLastMsg:(id)arg2;
- (unsigned int)getMaxEnterTime;
- (void)updateMaxMsgCreateTime;
- (unsigned int)sumUnreadCount;
- (void)pushFrontSessionInfo:(id)arg1;
- (unsigned char)FFDataSvrMgrSvrFavZZ;
- (void)syncSessionOrder:(id)arg1;
- (void)removeSessionInfo:(id)arg1;
- (void)updateSessionInfo:(id)arg1;
- (void)addOrUpdateSessionInfo:(id)arg1 isNew:(char *)arg2;
- (long long)indexInSessionArray:(id)arg1 withUserName:(id)arg2;
- (long long)indexInSessionArrayWithUserName:(id)arg1;
- (id)sessionInfoByUserName:(id)arg1;
- (id)sessionInfoAtIndex:(unsigned long long)arg1;
- (unsigned long long)sessionArraryCount;
- (void)resetSessionArray;
- (void)mergeSessionTasksIfNeeded:(id)arg1;
- (void)onSessionReorderWhenSessionList:(id)arg1;
- (void)onSessionReorderWhenDraftChange:(id)arg1;
- (void)onSessionReorderWhenModifyContact:(id)arg1;
- (void)onSessionReorderWhenModMsg:(id)arg1;
- (void)onSessionReorderWhenUpdateSession:(id)arg1;
- (void)onSessionReorderWhenMutedSession:(id)arg1;
- (void)onSessionReorderWhenStickSession:(id)arg1;
- (void)onSessionReorderWhenModifySession:(id)arg1;
- (void)onSessionReorderWhenEnterSession:(id)arg1;
- (void)doSyncSessionList:(id)arg1 source:(int)arg2;
- (void)doSyncExecuteTask:(id)arg1;
- (void)restoreOldSortedSessionList;
- (void)executeTask;
- (void)addExecuteQueue:(id)arg1;
- (void)stopTimer;
- (void)startWithInterval:(double)arg1;
@property(retain, nonatomic) NSArray *oldSortedSessionArray; // @dynamic oldSortedSessionArray;
@property(retain, nonatomic) MMTimer *myTimer; // @dynamic myTimer;
@property(retain, nonatomic) NSMutableArray *syncTaskArray; // @dynamic syncTaskArray;
@property(retain, nonatomic) NSMutableArray *taskArray; // @dynamic taskArray;
- (void)storageDeleteBrandSessionInfo:(id)arg1;
- (void)storageSaveBrandSessionInfos:(id)arg1;
- (void)storageDeleteSessionInfo:(id)arg1;
- (void)storageSaveSessionInfos:(id)arg1;
- (void)storageUninit;
- (void)storageInit;
- (void)notifyUnreadCount;
- (void)notifyIfUnreadCountChange;
- (void)countUnreadCount;
- (id)getSessionContact:(id)arg1;
- (void)removeSessionOfUser:(id)arg1 isDelMsg:(BOOL)arg2;
- (void)clearSessionOfUser:(id)arg1;
- (BOOL)isHideSession:(id)arg1;
- (BOOL)isHideSession:(id)arg1 lastMsgCreateTime:(unsigned int)arg2;
- (void)hideSessionOfUser:(id)arg1 clearToTime:(unsigned int)arg2;
- (void)hideSessionOfUser:(id)arg1;
- (void)deleteMessage:(id)arg1;
- (void)changeSessionUnreadCountWithUserName:(id)arg1 to:(unsigned int)arg2 isMarkUnread:(BOOL)arg3;
- (BOOL)isSessionHandled:(id)arg1;
- (id)filterValidSyncGroupChat:(id)arg1;
- (BOOL)isValidSyncSession:(id)arg1;
- (id)genSessionInfo:(id)arg1 withEnterTime:(unsigned int)arg2;
- (id)genSessionInfo:(id)arg1 withAddMsg:(id)arg2;
- (id)genSessionInfoByContact:(id)arg1;
- (void)loadExtendedMsgData:(id)arg1;
- (void)loadBrandSessionData;
- (void)loadSessionData;
- (void)loadDataWithCompletion:(CDUnknownBlockType)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

